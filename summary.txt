wk1:

数组 array:查询 O(1) 插入/删除O(n)  尾插o(1) append经过优化也可以o(1),申请大一点空间前面预留一部分空间，头指针左移

链表 linked list：用于LRU cache
单链表，增删,prepend,append,o(1),lookup o(n)
循环链表，尾节点next指向head 增删,prepend,append,o(1),lookup o(n)
双向链表，每个节点有prev和next两个指针. 增删,prepend,append,o(1),lookup o(n)

跳表 skip list：元素必须是有序的，对标二分查找 用于redis，空间换时间 ，索引
插入/删除/搜索 都是o(log n)
每次新增或删除都要更新索引，维护成本高


学习了快慢指针，夹逼算法和基本数据结构，例如数组，链表，跳表，栈，队列，双端队列，优先队列

wk2:
学习了哈希表，树，堆和图数据结构。哈希表查询O(1),树的前序，中序，后序遍历，堆分为大根堆和小根堆，取最大值或最小值为O(1),图是带环的树结构，面试考的少，讲的较简略

wk3:
递归模板
def preorder(self,root):
  if root:
    self.traverse_path.append(root.val)
    self.preorder(root.left)
    self.preorder(root.right)

def inorder(self,root):
  if root:
    self.preorder(root.left)
    self.traverse_path.append(root.val)
    self.preorder(root.right)

def postorder(self.root):
  if root:
    self.preorder(root.left)
    self.preorder(root.right)
    self.traverse_path.append(root.val)

def recursion(level,param1,param2,...):
 #terminator
  if level>max_level:
    process_result
    return

 #process logic in current level
  process(level,data,...)
 #drill down
  self.recursion(level+1,p1,...)

 # reverse the current level status if needed

#分治代码模板

def divide_conquer(problem,param1,param2,...):
  #recursion terminator
  if problem is None:
    print_result
    reutrn
  #prepare data
  data=prepare_data(problem)
  subproblems=split_problem(problem,data)
  #conquer subproblems
  subresult1=self.divide_conquer(subproblems[0],p1,..)
  subresult2=self.divide_conquer(subproblems[1],p1,..)
  subresult3=self.divide_conquer(subproblems[2],p1,..)
  #process and generate the final result
  result=process_result(subresult1,subresult2,subresult3)

 #revert the current level states




====wk4: dfs和bfs====

struct TreeNode{
  int val;
  TreeNode* left;
  TreeNode* right;
  TreeNode(int x):val(x),left(NULL),right(NULL){}
}

dfs模版-->二叉树中序遍历
def dfs(node):
  if node in visited:
    return
  visited.add(node)
  #process current node
  #logic here
  dfs(node.left)
  dfs(node.right)

多叉树中序遍历
====python version===
visited=set()
def dfs(node,visited):
  if node in visited:
    return
  visited.add(node)

  for next_node in node.children():
    if not next_node in visited:
      dfs(next_node,visited)


====c++ version====
map<int,int> visited;
void dfs(Node* root){
  if(!root) return;
  if(visited.count(root->val)){
    return;//already visited
  }
  visited[root->val]=1;

  for(int i=0;i<root->children.size();++i){
    dfs(root->children[i]);
  }
  return ;
}
//非递归版，手动维护一个stack
void dfs(Node* root){
  map<int,int> visited;
  if(!root) return;
  stack<Node*> stackNode;
  stackNode.push(root);

  while(!stackNode.empty()){
    Node* node=stackNode.top();
    stackNode.pop();
    if(visited.count(node->val)) contine;
    visited[node->val]=1;

    for(int i=node->children.size()-1;i>=0;--i){
      stackNode.push(node->children[i]);
    }
  }
  return ;
}

bfs模版-->一层一层的遍历，理解重点，先放一个根节点，每次弹出节点时，把他的子节点入queue，不断遍历queue直到为空
def BFS(graph,start,end):
  queue=[]
  quequ.append([start])
  visited.add(start)

  while queue:
    node=queue.pop()
    visited.add(node)
    process(node)
    nodes=generate_related_nodes(node)
    queue.push(nodes)

void bfs(Node* node){
  map<int,int> visited;
  if(!root) return;
  queue<Node*> queueNode;
  queueNode.push(root);
  while(!queueNode.empty()){
    Node* node=queueNode.top();
    queueNode.pop();
    if(visited.count(node->val)) continue;

    visited[node->val]=1;

    for(int i=0;i<node->children.size();++i){
      queueNode.push(node->children[i]);
    }
  }
  return ;
}

====binary search二分查找====
left,right=0,len(array)-1

while left<=right:
  mid=left+(right-left)/2
  if array[mid]==target:
    break or return result
  elif array[mid]<target:
    left=mid+1
  else:
    right=mid-1


======dynamic programing==== 
记忆化搜索,每次计算都加到mem里，计算前先查询mem里是否有
如果已经有了，直接返回mem[n]，如果没有就加入，再返回mem[n]
int fib(int n, int[] mem){
  if(n<=1){
    return n;
  }
  if (mem[n]==0){
    mem[n]=fib(n-1)+fib(n-2);
  }
  return mem(n); 
}

递推
a[0]=0,a[1]=1;
for(int i=2 ;i<=n;++i){
  a[i]=a[i-1]+a[i-2];
}


===============毕业总结===============
经过2个月刻意练习，对算法与数据结构有了更全面深入了解，中途因各种原因中断了3个星期，
本来打算就此放弃，在班班的鼓励下，咬紧牙关最后坚持了下来，顺利完成的学习。

要完全掌握所有知识点还有很长的学习过程，后面我会持续学习，把还没来得及搞清楚的知识点弄明白。

在次感谢极客训练营团队的精心培训





















